<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NeoCorp - Ficha de Personagem: <%= character.info.name %></title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        primary: '#3b82f6', 
                        secondary: '#2563eb',
                        accent: '#1d4ed8', 
                        dark: '#0f172a', 
                        darker: '#0a1120',
                        card: '#1e293b', 
                        cardLight: '#334155',
                        darkBorder: '#334155',
                        darkTextPrimary: '#e2e8f0',
                        darkTextSecondary: '#94a3b8',
                        infoValue: '#60a5fa', // Light blue for values
                        infoLabel: '#94a3b8',  // Same as darkTextSecondary for labels
                        success: '#10b981',
                        warning: '#f59e0b',
                        danger: '#ef4444'
                    }
                }
            }
        }
    </script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        body { font-family: 'Inter', sans-serif; background-color: #0a1120; color: #e2e8f0; }
        .tab-content-char { display: none; animation: fadeIn 0.3s ease forwards; }
        .tab-content-char.active { display: block; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        .active-char-tab { background-color: #3b82f6; color: white; }
        .char-tab-btn:hover:not(.active-char-tab) { background-color: #334155; }
        .attribute-box { background-color: #334155; border: 1px solid #475569; }
        .skill-item { border-left: 3px solid #3b82f6; }
        ::-webkit-scrollbar { width: 8px; height: 8px; }
        ::-webkit-scrollbar-track { background: #1e293b; border-radius: 4px; }
        ::-webkit-scrollbar-thumb { background: #334155; border-radius: 4px; }
        ::-webkit-scrollbar-thumb:hover { background: #475569; }
        input[type="number"], input[type="text"], textarea, select { background-color: #334155; border-color: #475569; color: #e2e8f0; padding: 0.5rem 0.75rem; border-radius: 0.375rem; }
        input:focus, textarea:focus, select:focus { border-color: #3b82f6; outline: none; box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3); }
        .description-text { overflow-y: auto; padding-right: 5px; font-size: 0.8rem; /* Adjusted max-height with responsive classes */ }
        
        /* Modal Styles */
        .modal { display: none; position: fixed; z-index: 100; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.7); }
        .modal-content { background-color: #1e293b; /* card */ margin: 10% auto; padding: 20px sm:padding: 25px; border: 1px solid #334155; /* darkBorder */ border-radius: 0.75rem; /* rounded-xl */ position: relative; /* Responsive width in Tailwind classes */ }
        .modal-close-btn { color: #94a3b8; /* darkTextSecondary */ float: right; font-size: 24px sm:font-size:28px; font-weight: bold; line-height: 1; cursor: pointer; }
        .modal-close-btn:hover, .modal-close-btn:focus { color: #e2e8f0; /* darkTextPrimary */ text-decoration: none; }
        .modal-item-list label:hover { background-color: #475569; } /* slightly lighter for hover */
    </style>
</head>
<body class="bg-darker text-darkTextPrimary">
    <!-- Navbar -->
    <nav class="bg-dark shadow-lg sticky top-0 z-50">
        <div class="max-w-screen-2xl mx-auto px-2 sm:px-4 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <div class="flex-shrink-0 flex items-center">
                        <a href="/dashboard" class="flex items-center">
                            <div class="bg-gradient-to-r from-blue-500 to-indigo-600 w-8 h-8 rounded-lg flex items-center justify-center">
                                <i class="fas fa-cube text-white"></i>
                            </div>
                            <span class="ml-2 text-lg sm:text-xl font-bold text-white">Neo<span class="text-blue-400">Corp</span></span>
                        </a>
                    </div>
                    <span class="ml-3 sm:ml-6 text-gray-400">/</span>
                    <span class="ml-1 sm:ml-2 text-base sm:text-lg font-semibold text-white truncate max-w-[100px] xs:max-w-[150px] sm:max-w-xs"><%= character.info.name %></span>
                </div>
                <div class="flex items-center">
                     <button type="submit" form="characterSheetForm" class="px-3 py-2 sm:px-4 text-xs sm:text-sm bg-gradient-to-r from-green-500 to-emerald-600 text-white font-medium rounded-lg shadow hover:from-green-600 hover:to-emerald-700 transition flex items-center">
                        <i class="fas fa-save sm:mr-2"></i> <span class="hidden sm:inline">Salvar Alterações</span>
                    </button>
                </div>
            </div>
        </div>
    </nav>

    <form id="characterSheetForm" action="/character/<%= character.id %>/update" method="post">
        <div id="newly-added-items-container"></div> <!-- Holds new_..._ids[] and deleted_..._ids[] -->

        <div class="max-w-screen-2xl mx-auto px-2 sm:px-4 lg:px-6 py-4 sm:py-6">
            <!-- Character Header & Core Stats -->
            <div class="bg-card p-4 sm:p-6 rounded-xl shadow-lg border border-darkBorder mb-4 sm:mb-6">
                <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-4">
                    <div>
                        <input type="text" name="info_name" value="<%= character.info.name %>" class="text-2xl sm:text-3xl font-bold bg-transparent border-0 focus:ring-0 focus:border-primary p-0 mb-1 sm:mb-2 w-full md:w-auto inline-block">
                        <p class="text-sm sm:text-base text-darkTextSecondary">
                            <select name="classe" class="bg-transparent border-0 focus:ring-0 focus:border-primary p-0 m-0 inline-block appearance-none text-sm sm:text-base">
                                <% const classes = ["Combatente", "Especialista", "Ocultista", "Mundano"]; %>
                                <% classes.forEach(cls => { %>
                                    <option value="<%= cls.toLowerCase() %>" <%= character.classe.toLowerCase() === cls.toLowerCase() ? 'selected' : '' %>><%= cls %></option>
                                <% }); %>
                            </select>
                            - NEX 
                            <input type="number" name="nex" value="<%= character.nex %>" min="0" max="99" class="w-12 sm:w-16 text-center bg-transparent border-0 focus:ring-0 focus:border-primary p-0 m-0 inline-block text-sm sm:text-base">%
                        </p>
                    </div>
                    <div class="text-xs sm:text-sm text-darkTextSecondary mt-2 md:mt-0 text-left md:text-right">
                        ID do Personagem: <%= character.id %> <br>
                        Campanha Atual: <%= character.currentCampain ? `ID ${character.currentCampain}` : "Nenhuma" %>
                    </div>
                </div>
                <div class="grid grid-cols-3 sm:grid-cols-5 gap-2 sm:gap-4 text-center">
                    <% const attributes = { for: "FOR", vig: "VIG", agi: "AGI", pre: "PRE", int: "INT" }; %>
                    <% Object.entries(attributes).forEach(([key, label]) => { %>
                    <div class="attribute-box p-2 sm:p-3 rounded-lg">
                        <label class="block text-xs text-darkTextSecondary uppercase tracking-wider"><%= label %></label>
                        <input type="number" min="0" name="attributes_<%= key %>" value="<%= character.attributes[key] %>" class="text-xl sm:text-2xl font-bold w-full text-center bg-transparent border-0 focus:ring-0 p-0 m-0">
                    </div>
                    <% }); %>
                </div>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-6">
                <!-- Left Column: Skills -->
                <div class="lg:col-span-1 space-y-4 sm:space-y-6">
                    <div class="bg-card p-4 sm:p-6 rounded-xl shadow-lg border border-darkBorder">
                        <h2 class="text-lg sm:text-xl font-semibold mb-3 sm:mb-4 pb-2 border-b border-darkBorder">Perícias</h2>
                        <div class="space-y-2 sm:space-y-3 max-h-[45vh] md:max-h-[55vh] lg:max-h-[calc(100vh-260px)] overflow-y-auto pr-1 sm:pr-2">
                            <% const skillOrder = [
                                "acrobacia", "adestramento", "artes", "atletismo", "atualidades", "ciencias", "crime", 
                                "diplomacia", "enganacao", "fortitude", "furtividade", "iniciativa", "intimidacao", 
                                "intuicao", "investigacao", "luta", "medicina", "ocultismo", "percepcao", "pilotagem", 
                                "pontaria", "profissao", "reflexos", "religiao", "sobrevivencia", "tatica", "tecnologia", "vontade"
                            ]; %>
                            <% skillOrder.forEach(skillKey => { 
                                const skillName = skillKey.charAt(0).toUpperCase() + skillKey.slice(1);
                            %>
                            <div class="skill-item bg-cardLight p-2 sm:p-3 rounded-md flex justify-between items-center">
                                <label class="text-xs sm:text-sm font-medium text-darkTextPrimary"><%= skillName %></label>
                                <input type="number" min="0" max="15" step="5" name="skills_<%= skillKey %>" value="<%= characterSkills[skillKey] %>" class="w-14 sm:w-16 text-right bg-transparent border-0 focus:ring-0 focus:border-primary p-0 m-0 text-xs sm:text-sm">
                            </div>
                            <% }); %>
                        </div>
                    </div>
                    <!-- Equipped Items section was hidden, leaving it as is unless requested -->
                </div>

                <!-- Right Column: Tabs (Info, Inventory, Powers, Rituals) -->
                <div class="lg:col-span-2">
                    <div class="mb-4 sm:mb-6 flex flex-wrap border-b border-darkBorder">
                        <button type="button" class="char-tab-btn px-3 py-2 sm:px-4 md:px-6 sm:py-3 text-xs sm:text-sm font-medium text-darkTextPrimary hover:text-darkTextSecondary focus:outline-none active-char-tab" data-tab="char-info"><i class="fas fa-user-circle sm:mr-2"></i> <span class="hidden sm:inline">Informações</span></button>
                        <button type="button" class="char-tab-btn px-3 py-2 sm:px-4 md:px-6 sm:py-3 text-xs sm:text-sm font-medium text-darkTextPrimary hover:text-darkTextSecondary focus:outline-none" data-tab="char-inventory"><i class="fas fa-briefcase sm:mr-2"></i> <span class="hidden sm:inline">Inventário</span></button>
                        <button type="button" class="char-tab-btn px-3 py-2 sm:px-4 md:px-6 sm:py-3 text-xs sm:text-sm font-medium text-darkTextPrimary hover:text-darkTextSecondary focus:outline-none" data-tab="char-powers"><i class="fas fa-bolt sm:mr-2"></i> <span class="hidden sm:inline">Poderes</span></button>
                        <button type="button" class="char-tab-btn px-3 py-2 sm:px-4 md:px-6 sm:py-3 text-xs sm:text-sm font-medium text-darkTextPrimary hover:text-darkTextSecondary focus:outline-none" data-tab="char-rituals"><i class="fas fa-book-dead sm:mr-2"></i> <span class="hidden sm:inline">Rituais</span></button>
                    </div>

                    <!-- Info Tab -->
                    <div id="char-info" class="tab-content-char active bg-card p-4 sm:p-6 rounded-xl shadow-lg border border-darkBorder lg:max-h-[calc(100vh-320px)] lg:overflow-y-auto">
                        <h2 class="text-lg sm:text-xl font-semibold mb-4">Detalhes do Personagem</h2>
                        <div class="space-y-3 sm:space-y-4">
                            <div><label for="char-age" class="block text-xs sm:text-sm font-medium text-darkTextSecondary mb-1">Idade</label><input type="text" id="char-age" name="info_age" value="<%= character.info.age %>" class="w-full text-sm sm:text-base"></div>
                            <div><label for="char-appearance" class="block text-xs sm:text-sm font-medium text-darkTextSecondary mb-1">Aparência</label><textarea id="char-appearance" name="info_appearanceDescription" rows="3" sm:rows="4" class="w-full text-sm sm:text-base"><%= character.info.appearanceDescription %></textarea></div>
                            <div><label for="char-description" class="block text-xs sm:text-sm font-medium text-darkTextSecondary mb-1">História / Personalidade</label><textarea id="char-description" name="info_description" rows="4" sm:rows="6" class="w-full text-sm sm:text-base"><%= character.info.description %></textarea></div>
                        </div>
                    </div>

                    <!-- Inventory Tab -->
                    <div id="char-inventory" class="tab-content-char bg-card p-4 sm:p-6 rounded-xl shadow-lg border border-darkBorder lg:max-h-[calc(100vh-320px)] lg:overflow-y-auto">
                        <div class="flex justify-between items-center mb-3 sm:mb-4">
                            <h2 class="text-lg sm:text-xl font-semibold">Inventário</h2>
                            <button type="button" class="open-modal-btn text-xs sm:text-sm bg-blue-600 hover:bg-blue-700 text-white font-medium py-1.5 px-2.5 sm:py-2 sm:px-4 rounded-lg flex items-center" data-type="item">
                                <i class="fas fa-plus sm:mr-2"></i> <span class="hidden sm:inline">Adicionar Item</span>
                            </button>
                        </div>
                        <div class="space-y-3 sm:space-y-4">
                            <div>
                                <h3 class="text-base sm:text-lg font-medium text-primary mb-2">Itens (<span class="item-count"><%= character.itens.length %></span>)</h3>
                                <div id="character-items-list" class="grid grid-cols-1 md:grid-cols-2 gap-2 sm:gap-3">
                                <% if (character.itens.length > 0) { %>
                                    <% character.itens.forEach(item => { %>
                                    <div class="p-2.5 sm:p-3 bg-cardLight rounded-md border border-darkBorder" data-item-id="<%= item.id %>">
                                        <div class="flex justify-between items-start">
                                            <div class="flex-grow mr-2">
                                                <h4 class="font-semibold text-sm sm:text-base text-darkTextPrimary"><%= item.name %> 
                                                    <span class="text-xs text-infoValue">(<span class="text-infoLabel">Cat:</span> <%= item.category %>, <span class="text-infoLabel">Esp:</span> <%= item.storage %>)</span>
                                                </h4>
                                                <p class="text-xs text-darkTextSecondary description-text max-h-16 sm:max-h-20 md:max-h-24"><%= item.description %></p>
                                            </div>
                                            <button type="button" class="delete-item-btn p-1 text-danger hover:text-red-400 transition-colors flex-shrink-0" data-item-id="<%= item.id %>" data-item-type="item">
                                                <i class="fas fa-trash-alt fa-xs sm:fa-sm"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <% }); %>
                                <% } else { %>
                                    <p class="no-items-text text-sm text-darkTextSecondary italic col-span-full">Nenhum item.</p>
                                <% } %>
                                </div>
                            </div>
                            <hr class="border-darkBorder my-4 sm:my-6">
                            <div class="flex justify-between items-center mb-2">
                                <h3 class="text-base sm:text-lg font-medium text-primary">Armas (<span class="weapon-count"><%= character.armas.length %></span>)</h3>
                                <button type="button" class="open-modal-btn text-xs sm:text-sm bg-blue-600 hover:bg-blue-700 text-white font-medium py-1.5 px-2.5 sm:py-2 sm:px-3 rounded-lg flex items-center" data-type="arma">
                                    <i class="fas fa-plus sm:mr-2"></i> <span class="hidden sm:inline">Adicionar Arma</span>
                                </button>
                            </div>
                             <div id="character-weapons-list" class="grid grid-cols-1 md:grid-cols-2 gap-2 sm:gap-3">
                                <% if (character.armas.length > 0) { %>
                                    <% character.armas.forEach(weapon => { %>
                                    <div class="p-2.5 sm:p-3 bg-cardLight rounded-md border border-darkBorder" data-item-id="<%= weapon.id %>">
                                        <div class="flex justify-between items-start">
                                            <div class="flex-grow mr-2">
                                                <h4 class="font-semibold text-sm sm:text-base text-darkTextPrimary"><%= weapon.name %></h4>
                                                <p class="text-xs text-darkTextSecondary description-text max-h-16 sm:max-h-20 md:max-h-24"><%= weapon.description %></p>
                                                <p class="text-xs mt-1">
                                                    <span class="text-infoLabel">Tipo:</span> <span class="text-infoValue"><%= humanizeWeaponType(weapon.weaponType) %></span>, 
                                                    <span class="text-infoLabel">Emp:</span> <span class="text-infoValue"><%= humanizeGrip(weapon.grip) %></span>, 
                                                    <span class="text-infoLabel">Prof:</span> <span class="text-infoValue"><%= humanizeProficiency(weapon.proficiency) %></span><br>
                                                    <span class="text-infoLabel">Dano:</span> <span class="text-infoValue"><%= weapon.damageDice || '-' %></span>, 
                                                    <span class="text-infoLabel">Crítico:</span> <span class="text-infoValue"><%= formatCritical(weapon.criticalChance, weapon.criticalMultiplier) %></span><br>
                                                    <span class="text-infoLabel">Espaços:</span> <span class="text-infoValue"><%= weapon.storage %></span>, 
                                                    <span class="text-infoLabel">Categoria:</span> <span class="text-infoValue"><%= weapon.category %></span>
                                                </p>
                                            </div>
                                            <button type="button" class="delete-item-btn p-1 text-danger hover:text-red-400 transition-colors flex-shrink-0" data-item-id="<%= weapon.id %>" data-item-type="arma">
                                                <i class="fas fa-trash-alt fa-xs sm:fa-sm"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <% }); %>
                                <% } else { %>
                                    <p class="no-weapons-text text-sm text-darkTextSecondary italic col-span-full">Nenhuma arma.</p>
                                <% } %>
                            </div>
                        </div>
                    </div>

                    <!-- Powers Tab -->
                    <div id="char-powers" class="tab-content-char bg-card p-4 sm:p-6 rounded-xl shadow-lg border border-darkBorder lg:max-h-[calc(100vh-320px)] lg:overflow-y-auto">
                        <div class="flex justify-between items-center mb-3 sm:mb-4">
                            <h2 class="text-lg sm:text-xl font-semibold">Poderes & Habilidades (<span class="power-count"><%= character.poderes.length %></span>)</h2>
                            <button type="button" class="open-modal-btn text-xs sm:text-sm bg-blue-600 hover:bg-blue-700 text-white font-medium py-1.5 px-2.5 sm:py-2 sm:px-4 rounded-lg flex items-center" data-type="poder">
                                <i class="fas fa-plus sm:mr-2"></i><span class="hidden sm:inline"> Adicionar Poder</span>
                            </button>
                        </div>
                        <div id="character-poderes-list" class="space-y-2 sm:space-y-3">
                        <% if (character.poderes.length > 0) { %>
                            <% character.poderes.forEach(poder => { %>
                            <div class="p-2.5 sm:p-3 bg-cardLight rounded-md border border-darkBorder" data-item-id="<%= poder.id %>">
                                <div class="flex justify-between items-start">
                                    <div class="flex-grow mr-2">
                                        <h3 class="font-semibold text-sm sm:text-base text-darkTextPrimary"><%= poder.name %> 
                                            <span class="text-xs text-infoValue"><%= poder.isHabilidade ? '(Habilidade)' : '(Poder)' %></span>
                                        </h3>
                                        <p class="text-xs text-darkTextSecondary description-text max-h-16 sm:max-h-20 md:max-h-24"><%- poder.description.replace(/\n/g, "<br>") %></p>
                                        <% if(poder.fromClasse || poder.fromTrilha || poder.elemento) { %>
                                        <p class="text-xs mt-1">
                                            <% if(poder.fromClasse) { %><span class="text-infoLabel">Classe:</span> <span class="text-infoValue"><%= poder.fromClasse %>.</span> <% } %>
                                            <% if(poder.fromTrilha) { %><span class="text-infoLabel">Trilha:</span> <span class="text-infoValue"><%= poder.fromTrilha %>.</span> <% } %>
                                            <% if(poder.elemento) { %><span class="text-infoLabel">Elemento:</span> <span class="text-infoValue"><%= poder.elemento %>.</span> <% } %>
                                        </p>
                                        <% } %>
                                    </div>
                                    <button type="button" class="delete-item-btn p-1 text-danger hover:text-red-400 transition-colors flex-shrink-0" data-item-id="<%= poder.id %>" data-item-type="poder">
                                        <i class="fas fa-trash-alt fa-xs sm:fa-sm"></i>
                                    </button>
                                </div>
                            </div>
                            <% }); %>
                        <% } else { %>
                            <p class="no-poderes-text text-sm text-darkTextSecondary italic">Nenhum poder ou habilidade.</p>
                        <% } %>
                        </div>
                    </div>

                    <!-- Rituals Tab -->
                    <div id="char-rituals" class="tab-content-char bg-card p-4 sm:p-6 rounded-xl shadow-lg border border-darkBorder lg:max-h-[calc(100vh-320px)] lg:overflow-y-auto">
                         <div class="flex justify-between items-center mb-3 sm:mb-4">
                            <h2 class="text-lg sm:text-xl font-semibold">Rituais (<span class="ritual-count"><%= character.rituais.length %></span>)</h2>
                            <button type="button" class="open-modal-btn text-xs sm:text-sm bg-blue-600 hover:bg-blue-700 text-white font-medium py-1.5 px-2.5 sm:py-2 sm:px-4 rounded-lg flex items-center" data-type="ritual">
                                <i class="fas fa-plus sm:mr-2"></i><span class="hidden sm:inline"> Adicionar Ritual</span>
                            </button>
                        </div>
                        <div id="character-rituais-list" class="space-y-2 sm:space-y-3">
                         <% if (character.rituais.length > 0) { %>
                            <% character.rituais.forEach(ritual => { %>
                            <div class="p-2.5 sm:p-3 bg-cardLight rounded-md border border-darkBorder" data-item-id="<%= ritual.id %>">
                                <div class="flex justify-between items-start">
                                    <div class="flex-grow mr-2">
                                        <h3 class="font-semibold text-sm sm:text-base text-darkTextPrimary"><%= ritual.name %></h3>
                                        <p class="text-xs text-darkTextSecondary description-text max-h-16 sm:max-h-20 md:max-h-24"><%- ritual.description.replace(/\n/g, "<br>") %></p>
                                        <p class="text-xs mt-1">
                                            <span class="text-infoLabel">Círculo:</span> <span class="text-infoValue"><%= ritual.circle %></span>, 
                                            <span class="text-infoLabel">Elemento:</span> <span class="text-infoValue"><%= ritual.element %></span><br>
                                            <span class="text-infoLabel">Alcance:</span> <span class="text-infoValue"><%= ritual.range %></span>, 
                                            <span class="text-infoLabel">Duração:</span> <span class="text-infoValue"><%= ritual.duration %></span>
                                        </p>
                                    </div>
                                    <button type="button" class="delete-item-btn p-1 text-danger hover:text-red-400 transition-colors flex-shrink-0" data-item-id="<%= ritual.id %>" data-item-type="ritual">
                                        <i class="fas fa-trash-alt fa-xs sm:fa-sm"></i>
                                    </button>
                                </div>
                            </div>
                            <% }); %>
                        <% } else { %>
                            <p class="no-rituais-text text-sm text-darkTextSecondary italic">Nenhum ritual conhecido.</p>
                        <% } %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>

    <!-- Generic Modal -->
    <div id="addItemModal" class="modal">
        <div class="modal-content w-11/12 sm:w-5/6 md:w-3/4 lg:max-w-xl xl:max-w-2xl"> {/* Responsive width */}
            <span class="modal-close-btn">×</span>
            <h2 id="modal-title" class="text-xl sm:text-2xl font-semibold mb-4 sm:mb-6 text-darkTextPrimary">Adicionar</h2>
            <div id="modal-search-bar" class="mb-3 sm:mb-4">
                <input type="text" id="modal-search-input" placeholder="Buscar por nome..." class="w-full text-sm sm:text-base">
            </div>
            <div id="modal-item-list" class="space-y-2 max-h-60 sm:max-h-72 md:max-h-80 overflow-y-auto p-1 pr-2 text-sm sm:text-base">
                {/* Items will be populated by JavaScript */}
            </div>
            <div class="mt-4 sm:mt-6 flex justify-end space-x-2 sm:space-x-3">
                <button type="button" id="modal-cancel-btn" class="px-3 py-1.5 sm:px-5 sm:py-2 text-xs sm:text-sm bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition">Cancelar</button>
                <button type="button" id="modal-add-selected-btn" class="px-3 py-1.5 sm:px-5 sm:py-2 text-xs sm:text-sm bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition">Adicionar Selecionados</button>
            </div>
        </div>
    </div>

    <script>
        function humanizeWeaponType(type) {
            const map = { "corpo_a_corpo": "Corpo-a-Corpo", "arremessavel": "Arremessável", "ranged": "À Distância", "fire": "Arma de Fogo" };
            return map[type] || type;
        }
        function humanizeGrip(grip) {
            const map = { "leve": "Leve", "uma_mao": "Uma Mão", "duas_maos": "Duas Mãos" };
            return map[grip] || grip;
        }
        function humanizeProficiency(proficiency) {
            const map = { "simples": "Simples", "tatica": "Tática", "pesada": "Pesada" };
            return map[proficiency] || proficiency;
        }
        function formatCritical(chance, multiplier) {
            if (chance && multiplier) return `${chance}/${multiplier}x`;
            if (multiplier) return `${multiplier}x`;
            return "-";
        }

        const allPoderes = <%- JSON.stringify(allPoderes || []) %>;
        const allRituais = <%- JSON.stringify(allRituais || []) %>;
        const allItems = <%- JSON.stringify(allItems || []) %>;
        const allArmas = <%- JSON.stringify(allArmas || []) %>;
        const characterId = <%= character.id %>;

        document.querySelectorAll('.char-tab-btn').forEach(button => {
            button.addEventListener('click', () => {
                document.querySelectorAll('.char-tab-btn').forEach(btn => btn.classList.remove('active-char-tab'));
                button.classList.add('active-char-tab');
                document.querySelectorAll('.tab-content-char').forEach(tab => tab.classList.remove('active'));
                document.getElementById(button.getAttribute('data-tab')).classList.add('active');
            });
        });

        const modal = document.getElementById('addItemModal');
        const modalTitle = document.getElementById('modal-title');
        const modalItemList = document.getElementById('modal-item-list');
        const modalCloseBtn = modal.querySelector('.modal-close-btn');
        const modalCancelBtn = document.getElementById('modal-cancel-btn');
        const modalAddSelectedBtn = document.getElementById('modal-add-selected-btn');
        const modalSearchInput = document.getElementById('modal-search-input');
        const newlyAddedItemsContainer = document.getElementById('newly-added-items-container');
        let currentModalType = ''; 
        let currentFullList = [];

        function openModal(type) {
            currentModalType = type;
            modalItemList.innerHTML = ''; 
            modalSearchInput.value = ''; 
            let dataList;
            let titlePrefix = "Adicionar ";
            switch (type) {
                case 'poder': dataList = allPoderes; titlePrefix += "Poder/Habilidade"; currentFullList = allPoderes; break;
                case 'ritual': dataList = allRituais; titlePrefix += "Ritual"; currentFullList = allRituais; break;
                case 'item': dataList = allItems; titlePrefix += "Item"; currentFullList = allItems; break;
                case 'arma': dataList = allArmas; titlePrefix += "Arma"; currentFullList = allArmas; break;
                default: return;
            }
            modalTitle.textContent = titlePrefix;
            populateModalList(dataList);
            modal.style.display = 'block';
        }
        
        function populateModalList(items) {
            modalItemList.innerHTML = ''; 
            const characterOwnedIds = getCurrentOwnedIds(currentModalType);
            const filteredItems = items.filter(item => !characterOwnedIds.has(String(item.id)));

            if (filteredItems.length === 0) {
                 modalItemList.innerHTML = `<p class="text-darkTextSecondary italic text-center py-4 text-sm">Nenhum ${currentModalType} novo disponível ou todos já foram adicionados.</p>`;
                 return;
            }

            filteredItems.forEach(item => {
                const label = document.createElement('label');
                label.className = 'flex items-center p-2 sm:p-3 bg-cardLight hover:bg-darkBorder rounded-md cursor-pointer transition-colors duration-150';
                
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'form-checkbox h-4 w-4 sm:h-5 sm:w-5 text-primary rounded mr-3 sm:mr-4 focus:ring-primary focus:ring-offset-0 focus:ring-offset-cardLight';
                checkbox.dataset.itemId = item.id;
                checkbox.dataset.itemName = item.name;
                checkbox.dataset.itemData = JSON.stringify(item);

                const nameSpan = document.createElement('span');
                nameSpan.className = 'text-darkTextPrimary font-medium text-sm sm:text-base';
                nameSpan.textContent = item.name;

                let details = '';
                if (currentModalType === 'poder') details = `${item.isHabilidade ? '(Hab.)' : '(Poder)'}${item.elemento ? ` - ${item.elemento}` : ''}`;
                else if (currentModalType === 'ritual') details = `Círculo ${item.circle} - ${String(item.element).charAt(0).toUpperCase() + item.element.slice(1)}`;
                else if (currentModalType === 'item') details = `Cat: ${item.category}, Esp: ${item.storage}`;
                else if (currentModalType === 'arma') {
                    details = `${humanizeWeaponType(item.weaponType)}, Emp: ${humanizeGrip(item.grip)}`;
                    if (item.damageDice) details += `, Dano: ${item.damageDice}`;
                    const critStr = formatCritical(item.criticalChance, item.criticalMultiplier);
                    if (critStr !== '-') details += `, Crítico: ${critStr}`;
                }
                
                const detailSpan = document.createElement('span');
                detailSpan.className = 'ml-auto text-xs text-darkTextSecondary';
                detailSpan.textContent = details;

                label.appendChild(checkbox);
                label.appendChild(nameSpan);
                if (details) label.appendChild(detailSpan);
                modalItemList.appendChild(label);
            });
        }

        function getCurrentOwnedIds(type) {
            const ids = new Set();
            let listElementId = '';
            if (type === 'poder') listElementId = 'character-poderes-list';
            else if (type === 'ritual') listElementId = 'character-rituais-list';
            else if (type === 'item') listElementId = 'character-items-list';
            else if (type === 'arma') listElementId = 'character-weapons-list';
            
            if (listElementId) {
                document.querySelectorAll(`#${listElementId} > div[data-item-id]`).forEach(el => {
                    ids.add(el.dataset.itemId);
                });
            }
            return ids;
        }

        modalSearchInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const filtered = currentFullList.filter(item => item.name.toLowerCase().includes(searchTerm));
            populateModalList(filtered);
        });

        document.querySelectorAll('.open-modal-btn').forEach(btn => {
            btn.addEventListener('click', () => openModal(btn.dataset.type));
        });

        function closeModal() { modal.style.display = 'none'; }
        modalCloseBtn.onclick = closeModal;
        modalCancelBtn.onclick = closeModal;
        window.onclick = function(event) { if (event.target == modal) closeModal(); }

        modalAddSelectedBtn.addEventListener('click', () => {
            const selectedCheckboxes = modalItemList.querySelectorAll('input[type="checkbox"]:checked');
            let listContainerId, noItemsTextClass, countClass;
            const itemType = currentModalType;

            switch (itemType) {
                case 'poder': listContainerId = 'character-poderes-list'; noItemsTextClass = 'no-poderes-text'; countClass = 'power-count'; break;
                case 'ritual': listContainerId = 'character-rituais-list'; noItemsTextClass = 'no-rituais-text'; countClass = 'ritual-count'; break;
                case 'item': listContainerId = 'character-items-list'; noItemsTextClass = 'no-items-text'; countClass = 'item-count'; break;
                case 'arma': listContainerId = 'character-weapons-list'; noItemsTextClass = 'no-weapons-text'; countClass = 'weapon-count'; break;
            }
            const listContainer = document.getElementById(listContainerId);
            const noItemsText = listContainer.querySelector(`.${noItemsTextClass}`);
            const countSpan = document.querySelector(`.${countClass}`);

            selectedCheckboxes.forEach(checkbox => {
                const itemId = checkbox.dataset.itemId;
                const itemName = checkbox.dataset.itemName;
                const itemData = JSON.parse(checkbox.dataset.itemData);

                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = `new_${itemType}_ids[]`;
                hiddenInput.value = itemId;
                newlyAddedItemsContainer.appendChild(hiddenInput);

                if (noItemsText) noItemsText.remove();

                const newItemDiv = document.createElement('div');
                // Adjusted padding and added responsive max-height to description here
                newItemDiv.className = 'p-2.5 sm:p-3 bg-cardLight rounded-md border border-darkBorder';
                newItemDiv.dataset.itemId = itemId;
                newItemDiv.dataset.isNew = "true"; 

                const flexContainer = document.createElement('div');
                flexContainer.className = 'flex justify-between items-start';

                const contentWrapper = document.createElement('div');
                contentWrapper.className = 'flex-grow mr-2'; // Added mr-2 for spacing from delete button

                let contentHTML = '';
                if (itemType === 'poder') {
                    contentHTML = `<h3 class="font-semibold text-sm sm:text-base text-darkTextPrimary">${itemName} <span class="text-xs text-infoValue">${itemData.isHabilidade ? '(Habilidade)' : '(Poder)'}</span></h3>`;
                    contentHTML += `<p class="text-xs text-darkTextSecondary description-text max-h-16 sm:max-h-20 md:max-h-24">${itemData.description.replace(/\n/g, "<br>")}</p>`;
                    if(itemData.fromClasse || itemData.fromTrilha || itemData.elemento) {
                         contentHTML += `<p class="text-xs mt-1">`;
                         if(itemData.fromClasse) contentHTML += `<span class="text-infoLabel">Classe:</span> <span class="text-infoValue">${itemData.fromClasse}.</span> `;
                         if(itemData.fromTrilha) contentHTML += `<span class="text-infoLabel">Trilha:</span> <span class="text-infoValue">${itemData.fromTrilha}.</span> `;
                         if(itemData.elemento) contentHTML += `<span class="text-infoLabel">Elemento:</span> <span class="text-infoValue">${itemData.elemento}.</span> `;
                         contentHTML += `</p>`;
                    }
                } else if (itemType === 'ritual') {
                    contentHTML = `<h3 class="font-semibold text-sm sm:text-base text-darkTextPrimary">${itemName}</h3>`;
                    contentHTML += `<p class="text-xs text-darkTextSecondary description-text max-h-16 sm:max-h-20 md:max-h-24">${itemData.description.replace(/\n/g, "<br>")}</p>`;
                    contentHTML += `<p class="text-xs mt-1">
                        <span class="text-infoLabel">Círculo:</span> <span class="text-infoValue">${itemData.circle}</span>, 
                        <span class="text-infoLabel">Elemento:</span> <span class="text-infoValue">${itemData.element}</span><br>
                        <span class="text-infoLabel">Alcance:</span> <span class="text-infoValue">${itemData.range}</span>, 
                        <span class="text-infoLabel">Duração:</span> <span class="text-infoValue">${itemData.duration}</span>
                    </p>`;
                } else if (itemType === 'item') {
                    contentHTML = `<h4 class="font-semibold text-sm sm:text-base text-darkTextPrimary">${itemName} 
                        <span class="text-xs text-infoValue">(<span class="text-infoLabel">Cat:</span> ${itemData.category}, <span class="text-infoLabel">Esp:</span> ${itemData.storage})</span>
                        </h4>
                        <p class="text-xs text-darkTextSecondary description-text max-h-16 sm:max-h-20 md:max-h-24">${itemData.description}</p>`;
                } else if (itemType === 'arma') {
                     contentHTML = `<h4 class="font-semibold text-sm sm:text-base text-darkTextPrimary">${itemName}</h4>`;
                     contentHTML += `<p class="text-xs text-darkTextSecondary description-text max-h-16 sm:max-h-20 md:max-h-24">${itemData.description || '-'}</p>`;
                     contentHTML += `<p class="text-xs mt-1">
                        <span class="text-infoLabel">Tipo:</span> <span class="text-infoValue">${humanizeWeaponType(itemData.weaponType)}</span>, 
                        <span class="text-infoLabel">Emp:</span> <span class="text-infoValue">${humanizeGrip(itemData.grip)}</span>, 
                        <span class="text-infoLabel">Prof:</span> <span class="text-infoValue">${humanizeProficiency(itemData.proficiency)}</span><br>
                        <span class="text-infoLabel">Dano:</span> <span class="text-infoValue">${itemData.damageDice || '-'}</span>, 
                        <span class="text-infoLabel">Crítico:</span> <span class="text-infoValue">${formatCritical(itemData.criticalChance, itemData.criticalMultiplier)}</span><br>
                        <span class="text-infoLabel">Espaços:</span> <span class="text-infoValue">${itemData.storage}</span>, 
                        <span class="text-infoLabel">Categoria:</span> <span class="text-infoValue">${itemData.category}</span>
                    </p>`;
                }
                contentWrapper.innerHTML = contentHTML;

                const deleteButton = document.createElement('button');
                deleteButton.type = 'button';
                deleteButton.className = 'delete-item-btn p-1 text-danger hover:text-red-400 transition-colors flex-shrink-0';
                deleteButton.dataset.itemId = itemId;
                deleteButton.dataset.itemType = itemType;
                deleteButton.innerHTML = '<i class="fas fa-trash-alt fa-xs sm:fa-sm"></i>'; // Responsive icon size

                flexContainer.appendChild(contentWrapper);
                flexContainer.appendChild(deleteButton);
                newItemDiv.appendChild(flexContainer);
                listContainer.appendChild(newItemDiv);
                
                if (countSpan) countSpan.textContent = parseInt(countSpan.textContent) + 1;
            });
            closeModal();
        });

        function handleDeleteItem(event) {
            const deleteButton = event.target.closest('.delete-item-btn');
            if (!deleteButton) return;
            const itemDiv = deleteButton.closest('div[data-item-id]');
            if (!itemDiv) return;

            const itemId = deleteButton.dataset.itemId;
            const itemType = deleteButton.dataset.itemType;
            const isNew = itemDiv.dataset.isNew === "true";
            itemDiv.remove(); 

            if (isNew) {
                const hiddenInputToRemove = newlyAddedItemsContainer.querySelector(`input[name="new_${itemType}_ids[]"][value="${itemId}"]`);
                if (hiddenInputToRemove) hiddenInputToRemove.remove();
            } else {
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = `deleted_${itemType}_ids[]`; 
                hiddenInput.value = itemId;
                newlyAddedItemsContainer.appendChild(hiddenInput);
            }

            let countClass, listContainerId, noItemsTextClass, noItemsMessage;
            switch (itemType) {
                case 'poder': countClass = 'power-count'; listContainerId = 'character-poderes-list'; noItemsTextClass = 'no-poderes-text'; noItemsMessage = 'Nenhum poder ou habilidade.'; break;
                case 'ritual': countClass = 'ritual-count'; listContainerId = 'character-rituais-list'; noItemsTextClass = 'no-rituais-text'; noItemsMessage = 'Nenhum ritual conhecido.'; break;
                case 'item': countClass = 'item-count'; listContainerId = 'character-items-list'; noItemsTextClass = 'no-items-text'; noItemsMessage = 'Nenhum item.'; break;
                case 'arma': countClass = 'weapon-count'; listContainerId = 'character-weapons-list'; noItemsTextClass = 'no-weapons-text'; noItemsMessage = 'Nenhuma arma.'; break;
            }

            const countSpan = document.querySelector(`.${countClass}`);
            if (countSpan) {
                const currentCount = parseInt(countSpan.textContent);
                if (currentCount > 0) countSpan.textContent = currentCount - 1;
            }
            
            const listContainer = document.getElementById(listContainerId);
            if (listContainer && listContainer.children.length === 0 && noItemsTextClass && noItemsMessage) {
                const p = document.createElement('p');
                p.className = `${noItemsTextClass} text-sm text-darkTextSecondary italic`; // Ensure text-sm for consistency
                if (listContainerId === 'character-items-list' || listContainerId === 'character-weapons-list') {
                     p.classList.add('col-span-full'); 
                }
                p.textContent = noItemsMessage;
                listContainer.appendChild(p);
            }
        }

        document.getElementById('character-poderes-list').addEventListener('click', handleDeleteItem);
        document.getElementById('character-rituais-list').addEventListener('click', handleDeleteItem);
        document.getElementById('character-items-list').addEventListener('click', handleDeleteItem);
        document.getElementById('character-weapons-list').addEventListener('click', handleDeleteItem);

    </script>
</body>
</html>